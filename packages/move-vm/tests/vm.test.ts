import { describe, it, expect } from "vitest";
import { SimpleMoveVM } from "../src/vm";
import { disassembleMoveModule } from "aptos-disassemble";
import {
  Address,
  Bool,
  Frame,
  InterpreterImpl,
  Ref,
  Struct,
  U64,
  U8,
  Value,
  Vec,
} from "../src/types";
import { V } from "vitest/dist/chunks/reporters.d.BFLkQcL6.js";

// 虚拟机测试用例

describe("SimpleVM", () => {
  it("should call a function and push result to operand stack", () => {
    let string_module = disassembleMoveModule(
      Buffer.from(
        "0xa11ceb0b0700000a0b01000602060a031070048001080588017507fd01d30108d0032010f00391010a8105060c8705ee020df50702000000060012000107000211070100000003000100010004030100010005040200010105060201000100070702000100080809000100090a010001000a0b0c0001000b0a090001010b0e09010001000c0f020001000d100c000100020a110001000e11090001000f12100001001010140001021315160100010214021601000103050905100c110c0206080006080001030002060a02060a02020708000800010202070a09000a09000307080003080002060a020301010106080003060800030301080005060a0201030800080001060a0900020708000a02010a0201060a0203060a02030305060a0203010101010b01010800010900010b0101090006737472696e6706537472696e6705627974657308696e6465785f6f6611696e7465726e616c5f696e6465785f6f6606617070656e6406766563746f7206696e7365727419696e7465726e616c5f69735f636861725f626f756e64617279066c656e6774680a7375625f737472696e670869735f656d7074790b617070656e645f75746638047574663813696e7465726e616c5f636865636b5f7574663813696e7465726e616c5f7375625f737472696e67087472795f75746638064f7074696f6e066f7074696f6e04736f6d65046e6f6e65000000000000000000000000000000000000000000000000000000000000000114636f6d70696c6174696f6e5f6d65746164617461090003322e3003322e31126170746f733a3a6d657461646174615f76315e0201000000000000000d45494e56414c49445f5554463819416e20696e76616c6964205554463820656e636f64696e672e02000000000000000e45494e56414c49445f494e44455813496e646578206f7574206f662072616e67652e0000000201020a020001000002060b0010000b0110001101020201000002070b000f000e01100014380002040100000d310a0010000c030a010a03410525042c0b030a0111050c040b0404280a002e11060c050a002e0600000000000000000a0111070c060a002e0b010b0511070c070d060b0211020d060b0711020b060b0015020b0001060200000000000000270b0301090c04050c0801000002040b0010003801020601000002040b0010004105020a01000002050b000b01110b1102020c01000002030b001000020d01020001000200050002000e00020007010000132f0b0010000c030a0341050c040a020b0425042c0a010a02250c050b0504290a030a0111050c060b0604260a030a0211050c070b0704220b030b010b02110e1200020b030106020000000000000027090c07051a090c060514090c05050e0f010000140c0e00110d04090b00120038020c010b010238030c0105070b01000002080e00110d04060b0012000206010000000000000027000000".replace(
          "0x",
          ""
        ),
        "hex"
      )
    );

    let vector_module = disassembleMoveModule(
      Buffer.from(
        "0xa11ceb0b0700000a080100040304d00104d4011405e8019f010787039d0208a4052010c405a3030ce708f90b000000060001000101000100020004010001000303050001000407050001000508020100010105090201000100070b0601000100080c0601000100090d06010001000a0e06010001000b0c06010001000c0f10010001000d1112010001000e1306010001000f06130100010010080601000100110213010001001215010100010013151601000100140e02010001001517060100010016110201000100171a1301000100180b0601000100191116010001001a1b16010001001b1c13010101001c1102010001001d1113010001001e11130100010502080209020a0210020102150217021902110202060a09000609000101010900020303020103010a03000303030303070a09000309000207090009000203090003070a0900030302070a09000a090005070a09000303070a09000301070a090002060a0900030106090002070a09000301070900010a090002030a090001060a0900010302070a09000900020a0303030309000a090002070a090006090004070a090003030303060a0900030302010a090006766563746f7208636f6e7461696e7308696e6465785f6f660572616e67650f72616e67655f776974685f73746570077265706c616365036d656d047377617006617070656e640a6d6f76655f72616e676507726576657273650e726576657273655f617070656e6406626f72726f770a626f72726f775f6d75740d64657374726f795f656d70747905656d70747906696e736572740973696e676c65746f6e0869735f656d707479066c656e67746808706f705f6261636b09707573685f6261636b0672656d6f76650c72656d6f76655f76616c75650d726576657273655f736c69636506726f746174650c726f746174655f736c69636505736c6963650b737761705f72656d6f7665047472696d0c7472696d5f72657665727365000000000000000000000000000000000000000000000000000000000000000114636f6d70696c6174696f6e5f6d65746164617461090003322e3003322e31126170746f733a3a6d657461646174615f7631ef020500000200000000001445494e4445585f4f55545f4f465f424f554e44532a54686520696e64657820696e746f2074686520766563746f72206973206f7574206f6620626f756e647301000200000000000e45494e56414c49445f52414e47452a54686520696e64657820696e746f2074686520766563746f72206973206f7574206f6620626f756e647302000200000000001845564543544f52535f4c454e4754485f4d49534d4154434828546865206c656e677468206f662074686520766563746f727320617265206e6f7420657175616c2e03000200000000000d45494e56414c49445f535445504354686520737465702070726f766964656420696e206072616e67656020697320696e76616c69642c206d7573742062652067726561746572207468616e207a65726f2e04000200000000001445494e56414c49445f534c4943455f52414e4745205468652072616e676520696e2060736c6963656020697320696e76616c69642e00000001000003200600000000000000000c020a0041020c030a020a0323041a0a000a0242020a012104150b00010b010108020b02060100000000000000160c0205050b00010b010109020101000003220600000000000000000c020a0041020c030a020a0323041b0a000a0242020a012104160b00010b0101080b02020b02060100000000000000160c0205050b00010b010109060000000000000000020201000006050b000b01060100000000000000110302040100000a1f0a002e41020c030a010a0323041b0b000b0143020b0238000c040b04020a000b0244020a000b010b0347020b0045020c04050e0b000106000002000000000027060102000701000003160a002e41020c020e0141020c030d010600000000000000000b030b000b0238010b0146020000000000000000020d0138020b000b013803050f0b0102000c0102000d0102000e0102000f01000014440a002e41020c030a010a032504400a01060200000000000000160a032604210a000b0244020a010a0323041e0a000a010a0347020b01060100000000000000160c0105110b0001020b0238040c040d040600000000000000000601000000000000000b000b0138010b044602000000000000000005200a000b0244020a010a0323043d0a000a010a0347020b01060100000000000000160c0105300b000105200b0001060000020000000000271101000006050b0041020600000000000000002102120102000801020013010200140102000301000018180a02060000000000000000240416401600000000000000000c030a000a012304140d030a0044160a020c040b000b04160c0005060b03020603000200000000002715010000194b0a002e41020c020a010a0226040c0b0001060000020000000000270a01060300000000000000160a022604280b02060100000000000000170c020a010a022304230a000a010b01060100000000000000160c010a01470205160b0045020c030b0302400200000000000000000c040b000b010601000000000000000d0406000000000000000038010d0445020b04460200000000000000000c0305260b02060100000000000000170c020a010a022304470a000a010b01060100000000000000160c010a014702053a0b0045020c0305261601000014120a002e0b0138050c02040d0b000b023806400201000000000000000c030b03020b0001400200000000000000000c03050b0901000016090a002e41020c010b000600000000000000000b013807020a01000016150e0141020c020a020600000000000000002404100a000d01450244020b02060100000000000000170c0205030b00010b0146020000000000000000021701000006270a010a022504230a010a0221040b0b0001020b02060100000000000000170c020a010a022304200a000a010a0247020b01060100000000000000160c010b02060100000000000000170c02050f0b0001020b00010601000200000000002718010000160a0a002e41020c020b000600000000000000000b010b023808021901000006120a000a010a0238070a000a020a0338070b000a010a0338070b010b030b02171602100100001307400200000000000000000c010d010b0044020b01021a0100001d270a010a022504240a020a004102250c030b030420400200000000000000000c040a010a0223041c0d040a000a0142021444020b01060100000000000000160c01050d0b00010b04020b000106040002000000000027090c0305091b01000016150a002e380903110a002e4102060100000000000000170c020a000b010b0247020b004502020b0001060000020000000000271c010000142c0a002e41020c020a010a02250428400200000000000000000c03050c05160b000a010b020b01170d0306000000000000000038010b03020a020a012404230d030a00450244020b02060100000000000000170c0205160b00010d03380205140b0001060000020000000000271d010000141f0a002e41020c020a010a0225041b400200000000000000000c030a010a022304170d030a00450244020b02060100000000000000170c02050a0b00010b03020b00010600000200000000002700".replace(
          "0x",
          ""
        ),
        "hex"
      )
    );

    let mem_module = disassembleMoveModule(
      Buffer.from(
        "0xa11ceb0b0700000a0901000203020e041002051211072318083b20105b1f0c7a130f8d01020000000100010100010002020301000101010207090009000109000207090007090000036d656d077265706c616365047377617006766563746f72000000000000000000000000000000000000000000000000000000000000000114636f6d70696c6174696f6e5f6d65746164617461090003322e3003322e310003000003050b000d0138000b010201030200000300".replace(
          "0x",
          ""
        ),
        "hex"
      )
    );

    let option_module = disassembleMoveModule(
      Buffer.from(
        "0xa11ceb0b0700000a0d010004020406030a9301049d010e05ab017d07a802e401088c042010ac04ad030ad907070be007020ce207bb040d9d0c020e9f0c020000000400010701000000030001010001010303010100010005050201000100060601010001000706080100010008090a01000100090008010001010a0b01010001000b0d04010001000c0601010001000d0d02010001000e0f02010201000f09020100010010050401000100110e0d010001001211020103010013040d0100010014020d0100010115020e0100010016050d01000100170d0e010001010203020702090212021002110202060b00010900060900010101090002060a09000609000002070b00010900090001060b0001090001070a09000106090001070b000109000107090001060a090003060a090006090003010b00010900010a0900020b000109000900020a0900090002060b00010900090003060a090009000302070a09000b00010900066f7074696f6e064f7074696f6e0376656308636f6e7461696e7306766563746f7204737761700769735f736f6d6506626f72726f770a626f72726f775f6d757413626f72726f775f776974685f64656661756c740869735f656d7074790c64657374726f795f6e6f6e650769735f6e6f6e650c64657374726f795f736f6d651464657374726f795f776974685f64656661756c7407657874726163740466696c6c0866726f6d5f766563106765745f776974685f64656661756c74046e6f6e6504736f6d650973696e676c65746f6e0c737761705f6f725f66696c6c06746f5f766563000000000000000000000000000000000000000000000000000000000000000114636f6d70696c6174696f6e5f6d65746164617461090003322e3003322e31126170746f733a3a6d657461646174615f7631f9020300000400000000000e454f5054494f4e5f49535f5345547354686520604f7074696f6e6020697320696e20616e20696e76616c696420737461746520666f7220746865206f7065726174696f6e20617474656d707465642e0a2054686520604f7074696f6e602069732060536f6d6560207768696c652069742073686f756c6420626520604e6f6e65602e01000400000000000f454f5054494f4e5f4e4f545f5345547354686520604f7074696f6e6020697320696e20616e20696e76616c696420737461746520666f7220746865206f7065726174696f6e20617474656d707465642e0a2054686520604f7074696f6e6020697320604e6f6e6560207768696c652069742073686f756c642062652060536f6d65602e020004000000000014454f5054494f4e5f5645435f544f4f5f4c4f4e474143616e6e6f7420636f6e73747275637420616e206f7074696f6e2066726f6d206120766563746f7220776974682032206f72206d6f726520656c656d656e74732e0000000201020a090000020001000004050b0037000b013800020201000007110a002e3801040d0b0036000c020a0245020b020b014402020b00010601000400000000002704010000040c0a00380104080b0037000600000000000000004202020b00010601000400000000002705010000040d0a002e380104090b0036000600000000000000004302020b000106010004000000000027060100000c130b0037000c020a023802040c0b02010b010c030b03020b01010b0206000000000000000042020c03050a0801000004090e00380304070b003a004602000000000000000002060000040000000000270a0100000e0d0e003801040b0b003a000c010d0145020b014602000000000000000002060100040000000000270b010000100e0b003a000c020e023802040a0b010c030b03020d0245020c0305080c010000040c0a002e380104080b0036004502020b0001060100040000000000270d010000070f0b0036000c020a022e3802040b0b020b014402020b0201060000040000000000270e010000040a0e0041020601000000000000002504080b00390002060200040000000000270f01000012120b0037000c020a023802040c0b02010b010c030b03020b020600000000000000004202140c03050a0901000004040b0037003802020301000004050b00370038022002100100000403400200000000000000003900021101000004040b0038043900021301000013130b0036000c020a022e3802040e38050c030b020b0144020b03020a02450238060c0305091401000004030b003a00020000000200".replace(
          "0x",
          ""
        ),
        "hex"
      )
    );

    /*
        module contract::simple{
            use std::vector;
            public fun add(x: u64, y: u64): u64 {
                x + y
            }

            public fun test_vector(): vector<u64> {
                let v = vector::empty();
                v.push_back(1);
                v.push_back(2);
                v.push_back(3);
                v
            }
            
            public fun test_vector_operations(): vector<address> {
                let v = vector::empty();
                v.push_back(@0x1);
                v.push_back(@0x2);
                v.push_back(@0x3);
                v
            }

            public fun test_vector_struct(): vector<string::String> {
                let v = vector::empty();
                v.push_back(string::utf8(b"Hello"));
                v.push_back(string::utf8(b"World"));
                v.push_back(string::utf8(b"!"));
                v
            }
        }
        }
    */

    let simple_module = disassembleMoveModule(
      Buffer.from(
        "a11ceb0b0700000a0901000402040403081e052618073e540892014006d2017d10cf021f0cee029c010000010601050700000100010001000202030001000302040001000402060001010708070001020303010300010a03010a050105010a0800010800010a020673696d706c65036164640b746573745f766563746f7216746573745f766563746f725f6f7065726174696f6e7312746573745f766563746f725f73747275637406537472696e6706737472696e670475746638000000000000000000000000000000000000000000000000000000000000123400000000000000000000000000000000000000000000000000000000000000010520000000000000000000000000000000000000000000000000000000000000000105200000000000000000000000000000000000000000000000000000000000000002052000000000000000000000000000000000000000000000000000000000000000030a02060548656c6c6f0a020605576f726c640a0202012114636f6d70696c6174696f6e5f6d65746164617461090003322e3003322e310001000002040b000b01160201010000030d400100000000000000000c000d0006010000000000000044010d0006020000000000000044010d0006030000000000000044010b000202010000040d400500000000000000000c000d00070044050d00070144050d00070244050b0002030100000610400700000000000000000c000d000703110444070d000704110444070d000705110444070b000200".replace(
          "0x",
          ""
        ),
        "hex"
      )
    );

    new Map<string, any>([["0x", 1]]);

    const vm = new SimpleMoveVM(
      {},
      {},
      {},
      {},
      {},
      new Map(),
      new Map([
        [
          `0x0000000000000000000000000000000000000000000000000000000000000001::string::internal_check_utf8`,
          (type_args: string[], args: Value[]) => {
            console.log("Checking UTF-8 encoding...");

            if (type_args.length !== 0 || args.length !== 1) {
              return {
                kind: "Abort",
                reason: "Invalid arguments for UTF-8 check",
              };
            }

            const value = args[0];

            if (
              !(value instanceof Ref) ||
              !(value.value instanceof Vec) ||
              !Array.isArray(value.value.value) ||
              !value.value.value.every((v) => v instanceof U8)
            ) {
              return {
                kind: "Abort",
                reason: "Expected a vec<u8> value",
              };
            } else {
              let vec = new Uint8Array(value.value.value.map((v) => Number(v.value.toString())));
              console.log(Buffer.from(vec).toString("utf8"));
              try {
                new TextDecoder().decode(vec);
              } catch (e) {
                return {
                  kind: "Return",
                  value: [new Bool(false)],
                };
              }
              return {
                kind: "Return",
                value: [new Bool(true)],
              };
            }
          },
        ],
        [
          `0x0000000000000000000000000000000000000000000000000000000000000001::string::internal_is_char_boundary`,
          (type_args: string[], args: Value[]) => {
            console.log("Checking if is char boundary...");

            function isCharBoundary(s: Uint8Array, i: number): boolean {
              // i 超界直接 false
              if (i < 0 || i > s.length) return false;
              // 0 或末尾一定是边界
              if (i === 0 || i === s.length) return true;
              // 检查是否不是 UTF-8 的续字节
              // UTF-8 续字节以 0b10xxxxxx 开头
              return (s[i] & 0b11000000) !== 0b10000000;
            }

            if (type_args.length !== 0 || args.length !== 2) {
              return {
                kind: "Abort",
                reason: "Invalid arguments for is_char_boundary check",
              };
            }

            const value = args[0];
            const index = args[1];

            console.log("Value:", value, "Index:", index);

            if (!(index instanceof U64)) {
              return {
                kind: "Abort",
                reason: "Expected a u64 value",
              };
            }

            if (!(value instanceof Vec)) {
              return {
                kind: "Abort",
                reason: "Expected a vec u8 value",
              };
            } else {
              if (!(value.value instanceof U8)) {
                return {
                  kind: "Abort",
                  reason: "Expected a vec<u8> value",
                };
              } else {
                let vec = new Uint8Array(value.value.map((v) => Number(v.value.toString())));
                const idx = Number(index.value.toString());
                if (!isCharBoundary(vec, idx)) {
                  return {
                    kind: "Return",
                    value: [new Bool(false)],
                  };
                }
              }
            }

            return {
              kind: "Return",
              value: [new Bool(true)],
            };
          },
        ],
      ])
    );

    const func = {
      address: "0x0000000000000000000000000000000000000000000000000000000000001234",
      module: "simple",
      name: "add",
      type_args: [],
      args: [new U64(1n), new U64(2n)],
    };

    vm.module_map.set(
      "0x0000000000000000000000000000000000000000000000000000000000001234::simple",
      simple_module
    );

    vm.module_map.set(
      "0x0000000000000000000000000000000000000000000000000000000000000001::string",
      string_module
    );

    vm.module_map.set(
      "0x0000000000000000000000000000000000000000000000000000000000000001::option",
      option_module
    );

    vm.module_map.set(
      "0x0000000000000000000000000000000000000000000000000000000000000001::vector",
      vector_module
    );

    vm.module_map.set(
      "0x0000000000000000000000000000000000000000000000000000000000000001::mem",
      mem_module
    );

    const result = vm.callFunction(func);

    expect(result).toEqual([new U64(3n)]);

    const result_vector = vm.callFunction({
      address: "0x0000000000000000000000000000000000000000000000000000000000001234",
      module: "simple",
      name: "test_vector",
      type_args: [],
      args: [],
    });

    expect(result_vector).toEqual([new Vec([new U64(1n), new U64(2n), new U64(3n)])]);

    const result_vector_operations = vm.callFunction({
      address: "0x0000000000000000000000000000000000000000000000000000000000001234",
      module: "simple",
      name: "test_vector_operations",
      type_args: [],
      args: [],
    });

    expect(result_vector_operations).toEqual([
      new Vec([
        new Address("0x0000000000000000000000000000000000000000000000000000000000000001"),
        new Address("0x0000000000000000000000000000000000000000000000000000000000000002"),
        new Address("0x0000000000000000000000000000000000000000000000000000000000000003"),
      ]),
    ]);

    const result_vector_struct = vm.callFunction({
      address: "0x0000000000000000000000000000000000000000000000000000000000001234",
      module: "simple",
      name: "test_vector_struct",
      type_args: [],
      args: [],
    });

    expect(result_vector_struct).toEqual([
      new Vec([
        new Struct(
          new Address("0x0000000000000000000000000000000000000000000000000000000000000001"),
          "string",
          "String",
          [],
          {
            0: new Vec([new U8(72n), new U8(101n), new U8(108n), new U8(108n), new U8(111n)]),
          }
        ),
        new Struct(
          new Address("0x0000000000000000000000000000000000000000000000000000000000000001"),
          "string",
          "String",
          [],
          {
            0: new Vec([new U8(87n), new U8(111n), new U8(114n), new U8(108n), new U8(100n)]),
          }
        ),
        new Struct(
          new Address("0x0000000000000000000000000000000000000000000000000000000000000001"),
          "string",
          "String",
          [],
          {
            0: new Vec([new U8(33n)]),
          }
        ),
      ]),
    ]);
  });
});
